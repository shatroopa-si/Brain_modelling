source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
f
f = c(1,2,3)
g
f + g
f = c(1,2)
f + g
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
f = vector(length = 5)
f
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
f = vector(length = 50)
f
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x);
colSums(x)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
clusters = list()                   #list of matrix(list of vectors)
for(i in 1:k)
{
clusters[[i]] = matrix(nrow = nPoints, ncol = dimension)
}
# assign each data point to a cluster corresponding to the centroid it is closest to
for(i in 1:nPoints)
{
point = retreivePoint(i)
#print(point)
#print(centroids[[1]])
dist = vector(length = k)
for(j in 1:k)
{
dist[j] = euclidDistance(point, centroids[[j]])
}
minDist = min(dist)
x = which(minDist == dist)[[1]]
clusters[[x]][length(clusters[[x]]) + 1,] = point
}
print(clusters)
##recompute centroids for each of the k clusters
for(i in 1:k)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
a = matrix(1:5)
a
a = rbind(a, 6)
a
a=  cbind(1:6)
a
a=  cbind(a, 1:6)
a
a = rbind(a, 6:3)
a = rbind(a, 6:5)
a
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
a = matrix(ncol = 7)
a
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
colSums(x)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
while(centroidCount <= k)
{
centroids[[centroidCount]] = retreivePoint(cKeys[centroidCount])
centroidCount = centroidCount + 1
}
centroids = list()
#generate k unique random numbers between 1 & nPoints which will be the index of centroid in dataDict
cKeys = sample(1:nPoints, k, replace = F)
centroidCount = 1
while(centroidCount <= k)
{
centroids[[centroidCount]] = retreivePoint(cKeys[centroidCount])
centroidCount = centroidCount + 1
}
print(centroids)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
cls
clean
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
print(centroids)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
length(clusters)
length(clusters[1:k])
clusters[1:k]
clusters[1:k]
clusters[[1:k]]
clusters
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
centroids = initCentroid(k)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
centroids = initCentroid(k)
#print(centroids)
clusters = createClusters(k, centroids, dataDict, 5)
#print(clusters)
print(kmeans(dataDict, 3))
print('*********************PASS**********************')
#initialize k clusters
clusters = list()                   #list of matrix(list of vectors)
for(i in 1:k)
{
clusters[[i]] = matrix(nrow = 0, ncol = dimension)
}
# assign each data point to a cluster corresponding to the centroid it is closest to
for(i in 1:nPoints)
{
point = retreivePoint(i)
#print(point)
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
27 * 61
15 * 61
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink("sink-examp.txt")
i <- 1:10
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink("sink-examp.txt")
centroids
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
centroids = initCentroid(k)
clusters = createClusters(k, 55)
print(centroids)
#lapply(centroids, write, "centroids.txt", append = TRUE, ncolumns = dimension)
# print(clusters)
for(i in 1:k)
{
print(dim(clusters[[i]])[1])
}
print(kmeans(dataDict, 2, iter.max = 55))
sink("centroids.txt")
centroids
##read centroids from file
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/dataDictionary.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
source('~/Work/padai/IIITB/brainModelling/kMeans/kMeans.R')
View(a)
View(a)
View(dataDict)
source('~/Desktop/imp/brainModelling/kMeans/dataDictionary.R')
euclidDistance <- function(point1, point2)
#print(centroids)
return(clusters)
}
clusteringVector = vector(length = nPoints)     #which data point was allotted which cluster
euclidDistance <- function(point1, point2)
{
##returns the euclidean distance between 2 points(taken as a vector)
total = 0                                 ##accumulator variable
for(index in 1:dimension){
diff = (point1[index] - point2[index]) ** 2
total = total + diff
}
distance = sqrt(total)
return(distance)
}
initCentroid <- function(k)
{
##randomly chosen data points will form the centroid
centroids = list()                #list of points(vector)
#generate k unique random integers between 1 & nPoints which will be the index of chosen centroid in dataDict
cKeys = sample(1:nPoints, k, replace = F)
centroidCount = 1
while(centroidCount <= k)
{
centroids[[centroidCount]] = retreivePoint(cKeys[centroidCount])
centroidCount = centroidCount + 1
}
return(centroids)
}
createClusters <- function(k, iterations)
{
##creates k clusters using initial set of centroids, the data dictionary, applying 'iterations' number of repeats
print(centroids)
for(iter in 1:iterations)
{
#print('*********************PASS**********************')
##initialize k clusters
clusters = list()                   #list of matrix (each row is a point in the cluster)
for(i in 1:k)
{
clusters[[i]] = matrix(nrow = 0, ncol = dimension)
}
##assign each data point to a cluster corresponding to the centroid it is closest to
for(i in 1:nPoints)
{
point = retreivePoint(i)
##calculate distance from each cluster and find the minimum
dist = vector(length = k)
for(j in 1:k)
{
dist[j] = euclidDistance(point, centroids[[j]])
}
minDist = min(dist)
##assign the point to the particular cluster
x = which(minDist == dist)[[1]]               #index of the cluster with minimum distance from the point
clusters[[x]] = rbind(clusters[[x]], point)
clusteringVector[i] <<- x
}
##recompute centroids(median method for multi-dimensional points) for each of the k clusters
for(i in 1:k)
{
sums = colSums(clusters[[i]])/dim(clusters[[i]])[1]
centroids[[i]] <<- sums
}
##repopulate empty clusters by choosing a random centroid
for(i in 1:k)
{
if(dim(clusters[[i]])[1] == 0)                #no rows in the matrix ====>> empty cluster
{
centroids[[i]] <<- retreivePoint(sample(1:nPoints, 1, replace = F))
}
}
}
#print(centroids)
return(clusters)
}
clusteringVector = vector(length = nPoints)     #which data point was allotted which cluster
centroids = initCentroid(k)
clusters = createClusters(k, 50)
print(centroids)
#lapply(centroids, write, "centroids.txt", append = TRUE, ncolumns = dimension)
# print(clusters)
for(i in 1:k)
{
print(dim(clusters[[i]])[1])
}
print("::::Clustering vector::::")
print(clusteringVector)
print(kmeans(dataDict, 2, iter.max = 50))
#sink("centroids.txt")
#centroids
source('~/Desktop/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
abs(-3)
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataDictionary.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
install.packages("cluster")
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/noisyDataLoad.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/kMeans.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/globalParams.R')
source('~/Desktop/cHEMICAL lOCHA/imp/brainModelling/kMeans/dataAnalysis.R')
